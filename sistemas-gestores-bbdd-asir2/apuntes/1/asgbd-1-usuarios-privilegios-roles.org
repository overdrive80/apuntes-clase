#+INCLUDE: "../../../common/header.org"
#+TITLE: Usuarios, privilegios y roles de *Oracle*
# #+OPTIONS: reveal_single_file:nil


* Introducción
- Oracle puede utilizarse simultáneamente por varios procesos y clientes
- Cada uno puede tener distintos permisos y capacidades
  - Espacio de disco disponible
  - Gasto en CPU, red
  - Acceso a diferentes tablas de datos

* /Tablespaces/
- *Oracle* almacena datos en los /tablespaces/
  - Conjuntos de ficheros
  - Normas para su tamaño: inicial, máximo, crecimiento
- Cada tablespace puede usarse para diferentes funciones
  - Datos de usuario o del sistema: /permanent tablespace/
  - Datos de recuperación: /undo tablespace/
  - Datos temporales: /temporary tablespace/

** Recordatorio: Tipos de fichero según su uso

- Permanentes (/permanent/)
  - Datos que deben ser guardados
  - Ejemplo: Empleados contratados, nóminas pagadas, declaraciones de impuestos,…
- De movimiento (/undo/)
  - Cambios que deben ser incluidos en archivos permanentes
  - Ejemplo: un puesto de peaje debe guardar todos los pagos con tarjeta, y enviarlos juntos
- De maniobra (/temporary/)
  - Se utilizan como extensión a la RAM de un ordenador, se borran cuando el proceso termina
  - Ejemplo: caché de disco de los navegadores


** ¿Por qué tantas normas?
- Disponibilidad
  - ¿Es mejor garantizar el espacio para las tablas?
  - ¿Es mejor ahorrar espacio mientras se pueda?
- Velocidad
  - Hacer crecer un fichero es lento
  - Un fichero que ha crecido poco a poco está disperso en el disco (y es más lento)
- Capacidad
  - Cada sistema de ficheros tiene un tamaño de fichero máximo

** /Tablespaces/ por defecto
- Por defecto, *Oracle* crea en una nueva base de datos
  - =users=: Tablespace asignado por defecto para los datos de todos los usuarios
  - =system=: Datos acerca de la instancia y del diccionario de datos
  - =sysaux=: Operaciones temporales del administrador que no caben en memoria
  - =undo= (=undotbs1=): Datos para deshacer las transacciones (=rollback=)
  - =temp=: Operaciones temporales de usuarios que no caben en memoria

#+reveal: split

#+begin_src sql
select tablespace_name, contents from dba_tablespaces;
#+end_src



-----
Mas información en:
- https://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_7003.htm
- https://docs.oracle.com/cd/B19306_01/server.102/b14220/physical.htm

** Crear un /tablespace/
#+begin_src sql
CREATE TABLESPACE ejemplo_tablespace
  DATAFILE
  '/tablespaces/ejemplo_1.dbf'  SIZE 10M
  AUTOEXTEND ON  NEXT 200k  MAXSIZE 14M,
  '/tablespaces/ejemplo_2.dbf'  SIZE 10M
  AUTOEXTEND ON  NEXT 200k  MAXSIZE 14M;
#+end_src

Más en [[https://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_7003.htm][docs.oracle.com]]

** ¿Por qué es tan complicado?
- Esta flexibilidad permite:
  - Que cada usuario tenga sus /tablespaces/
  - Que cada /tablespace/ esté en discos distintos (rapidez)
  - Que un /tablespace/ se localice en varios discos (rapidez, tamaño)
  - Mover /tablespaces/ una vez creados

** Ejercicio: Llena un tablespace
- Crea un /tablespace/ con un tamaño inicial de 10MB, y un tamaño máximo de 14MB
- Crea una tabla sobre el /tablespace/
- Inserta datos en la tabla hasta conseguir el error =ORA-01653=

#+begin_notes
create table datos(valor varchar(2048)) tablespace ejemplo_tablespace;  
begin
    for j in 1..1 loop
        for i in 1..1000 loop
            insert into datos values( 'datos ' || i );
        end loop;
        commit;
    end loop;
end;
/
#+end_notes

** Conceptos de almacenamiento
#+begin_src dot :file ./media/conceptos-almacenamiento.svg :exports results :cmdline -Tsvg
graph{
  //graph [nodesep=0.5, ranksep=0.5]
  node[ shape="box"]
  edge[fontname="courier", fontsize="10"]
  splines=true
  rankdir="LR"

  Database -- Tablespace [label="1    N"]
  Tablespace -- File[label="1    N"]
  File -- Segment [label="N    N"]
  Segment -- Extent [label="1    N"]
  Extent -- "Oracle block" [label="1    N"]

  Segment -- Tablespace[label="1    n"]

}
#+end_src

#+RESULTS:
[[file:./media/conceptos-almacenamiento.svg]]

Más información en [[https://docs.oracle.com/cd/B19306_01/server.102/b14220/logical.htm][Oracle.com]]
#+BEGIN_NOTES
https://www.erpgreat.com/oracle-database/tablespace-datafile-data-block-segment-extent.htm
Data Blocks

At the finest level of granularity, Oracle stores data in data blocks (also called logical blocks, Oracle blocks, or pages). One data block corresponds to a specific number of bytes of physical database space on disk. You set the data block size for every Oracle database when you create the database. This data block size should be a multiple 
of the operating system's block size within the maximum limit. Oracle data blocks are the smallest units of storage that Oracle can use or allocate.

Extents

The next level of logical database space is called an extent. An extent is a specific number of contiguous data blocks that is allocated for storing a specific type of information. 

Segments

The level of logical database storage above an extent is called a segment. A segment is a set of extents that have been allocated for a specific type of data structure, and that all are stored in the same tablespace. For example,each table's data is stored in its own data segment, while each index's datails stored in its own index segment. Oracle allocates space for segments in extents. Therefore, when the existing extents of a segment are full, Oracle allocates another extent for that segment. Because extents are allocated as needed, the extents of a segment may or may not be contiguous on disk. The segments also can span files, but the individual extents cannot. 

Databases and tablespaces 

An Oracle database is comprised of one or more logical storage units called tablespaces. The database's data is collectively stored in the database's tablespaces. 

Tablespaces and datafiles 

Each tablespace in an Oracle database is comprised of one or more operating system files called datafiles. A tablespace's datafiles physically store the associated database data on disk. 

Databases and datafiles 

A database's data is collectively stored in the datafiles that constitute each tablespace of the database. For example, the simplest Oracle database would have one tablespace and one datafile. A more complicated database might have three tablespaces, each comprised of two datafiles (for a total of six datafiles).  
#+END_NOTES

* Usuarios
¿Qué usuario hemos utilizado con =sqlplus= hasta ahora?

#+reveal: split
- *Oracle* tiene dos modos de autentificar usuarios
  - Autentificación de sistema operativo
  - Autentificación con seguridad nativa de *oracle*
- Al instalarlo, elegimos que el grupo =wheel= era administrador

** Creación de usuarios
#+begin_src sql
CREATE USER usuario IDENTIFIED BY contrasena
  DEFAULT TABLESPACE tablespace
  TEMPORARY TABLESPACE tablespace
  QUOTA UNLIMITED ON tablespace
  QUOTA tamano ON tablespace
  ACCOUNT LOCK
  ACCOUNT UNLOCK
#+end_src

** Modificación de usuario
- Modificación de un usuario ya creado
  #+begin_src sql
  ALTER USER usuario
    cualquier opcion valida al crear usuario
  #+end_src

- Borrado de usuario
  #+begin_src sql
  DROP USER usuario
  #+end_src




* Privilegios
- Cada usuario puede tener unos permisos distintos
- Ya hemos visto dos permisos
  - En qué /tablespaces/ se puede escribir 
  - Cuántos datos se pueden escribir en esos /tablespaces/
  - Si una cuenta está bloqueada
- Pero hay más permisos
  - Veremos los /privilegios/ de *Oracle*



** Privilegios de *Oracle*
|   | Privilegio                       | Objeto sobre el que se aplica                   |
|---+----------------------------------+-------------------------------------------------|
| / | <>                               | <>                                              |
|   | =Create, alter, drop=            | =Table, sequence, view, user, synonym, session= |
|   | =select, update, delete, insert= | Sobre campos de tablas y filas                  |

** Sintaxis de =Grant=

#+begin_src sql
grant PRIVILEGIO1,PRIVILEGIO2,...,PRIVILEGION 
on OBJETO
to USUARIO
with grant option;
#+end_src

#+begin_src sql
create table alumnos(...);
create user profesor ...;
grant select on alumnos to profesor;
#+end_src


[[https://docs.oracle.com/database/121/TTSQL/privileges.htm#TTSQL339][Fuente: docs.oracle.com]]

** Ejercicio
- Crea un usuario =CONPERMISOS=
  - Que tenga privilegios de =connect= y =resource=
  - Utilízalo para crear una tabla =DATOS(TEXTO varchar2(255),numero integer)=
  - Inserta datos (puede que necesite cuota)
- Crea un usuario =LIMITADO=
- Haz que =CONPERMISOS= de privilegios a =LIMITADO= para que:
  - Pueda leer todos los campos de la tabla =DATOS=
  - Pueda actualizar el campo =NUMERO= de tabla =DATOS=
  - Pero no pueda modificar el campo =TEXTO=, ni borrar filas, ni insertar filas

#+BEGIN_NOTES
grant update(column-name) on table-name to user-name
#+END_NOTES

** Ejercicio
- Haz que el usuario =CONPERMISOS= tenga una cuota de 100k en el tablespace =USERS=
- Llena toda su cuota insertando filas en la tabla =DATOS=
- ¿Qué ocurre?

#+BEGIN_NOTES
create user conpermisos identified by conpermisos;
grant resource,connect to conpermisos;
alter user conpermisos quota 100k on users;

connect conpermisos/conpermisos

create table datos(texto varchar2(255),numero integer);
insert into datos(texto) values('En un lugar de la Mancha de cuyo nombre no quiero acordarme');
insert into datos(texto) values('En un lugar de la Mancha de cuyo nombre no quiero acordarme');
insert into datos(texto) values('En un lugar de la Mancha de cuyo nombre no quiero acordarme');
insert into datos(texto) values('En un lugar de la Mancha de cuyo nombre no quiero acordarme');
insert into datos(texto) values('En un lugar de la Mancha de cuyo nombre no quiero acordarme');
commit;

ORA-01536: space quota exceeded for tablespace 'USERS'

#+END_NOTES

** Quitar privilegios
- Los privilegios se quitan con =revoke=
- Cuando un usuario pierde un privilegio, los pierden también todos los que recibieron el mismo privilegio a través de él
  - Por la cláusula =with grant option=

#+begin_src sql
connect sys/*******
grant select on unatabla to unusuario with grant option;

connect unusuario/*******
grant select on unatabla to otrousuario;

connect sys/*******
revoke select on unatabla from unusuario;

-- AQUI NI unusuario NI otrousuario TIENEN PRIVILEGIO SOBRE unatabla
#+end_src

* Roles
- Asignar todos los privilegios a un usuario es trabajoso, pero factible
- ¿Qué ocurre si tenemos que manejar a muchos usuario?
- Los *roles* permiten dar nombre a un grupo de privilegios
  - Se pueden asignar privilegios a un rol
  - Y después asignar ese rol a varios usuarios

** Sintaxis de roles
#+begin_src sql
create role NOMBREROL;
grant PRIVILEGIOS on OBJETOS to NOMBREROL;
grant NOMBREROL to USUARIO;
#+end_src

[[https://docs.oracle.com/cd/B10501_01/server.920/a96521/privs.htm][Fuente: docs.oracle.com]]

** Ejercicio
- Imagina que
  1. Creas un rol con sus permisos
  2. Le asignas privilegios
  3. Lo asignas al usuario =USUARIOANTES=
  4. Quitas algún privilegio del rol
  5. Asignas el rol al usuario =USUARIODESPUES=
- El usuario =USUARIODESPUES=, ¿tiene más, menos o los mismos privilegios que =USUARIOANTES=?
  - O lo que es lo mismo, ¿los permisos del rol se /copian/ al usuario o se /enlazan/?

#+BEGIN_NOTES
drop role ELROL;

create role ELROL;
grant resource, connect to ELROL;
grant select on LIMITADO.DATOS to ELROL;

drop user usuarioantes;
create user usuarioantes identified by u;
grant ELROL to usuarioantes;

revoke select on LIMITADO.DATOS from ELROL;

drop user usuariodespues;
create user usuariodespues identified by u;
grant ELROL to usuariodespues;

#+END_NOTES

* Perfiles

- Un /profile/ es un conjunto de limitaciones sobre el sistema *Oracle*
- No limita acceso a datos, sino al propio SGBD y sistema operativo


** Creación de perfiles
#+begin_src sql
CREATE PROFILE nombreperfil LIMIT 
   SESSIONS_PER_USER          UNLIMITED 
   CPU_PER_SESSION            UNLIMITED 
   CPU_PER_CALL               3000 
   CONNECT_TIME               45 
   IDLE_TIME                 300
   LOGICAL_READS_PER_SESSION  DEFAULT 
   LOGICAL_READS_PER_CALL     1000 
   PRIVATE_SGA                15K
   COMPOSITE_LIMIT            5000000; 

ALTER SYSTEM SET resource_limit = TRUE scope = BOTH 
#+end_src

- Nota: Según la fuente, los tiempos se miden en días. Se pueden especificar fracciones de día.
  - Pero a mí me funcionan como minutos 

[[https://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_6010.htm][Fuente: docs.oracle.com]]

** Asignación de perfil a un usuario
- En la creación (=create user=), o posteriormente
  #+begin_src sql
  alter user USUARIO profile NOMBREDEPERFIL
  #+end_src

** Ejercicio
- Haz que el usuario =LIMITADO= 
  - se quede sin sesión tras 1 minuto de inactividad
  - se quede sin sesión a los 2 minutos de conectarse, aunque no haya estado inactivo

#+BEGIN_NOTES
alter system set resource_limit = true scope=both;
drop profile limitado cascade;
create profile limitado limit idle_time 1 connect_time 2;
alter user limitado profile limitado;

ERROR at line 1:
ORA-02396: exceeded maximum idle time, please connect again

ERROR at line 1:
ORA-02399: exceeded maximum connect time, you are being logged off

#+END_NOTES

** Ejercicio
- Utiliza las vistas de *Oracle* para conocer los límites del profile por defecto.


** Ejercicio
- Usa la opción [[http://www.dba-oracle.com/t_password_verify_function.htm][=PASSWORD_VERIFY_FUNCTION=]] para evitar que las contraseñas sean más largas de tres caracteres
     
#+begin_notes   
Create or Replace Function tres_caracteres_o_menos
(in_username in varchar2,
in_new_password in varchar2,
in_old_password in varchar2)
return boolean
as
pwd_okay boolean;
begin
-- ***************************************************
-- you can write your own password validation here ...
-- ***************************************************
if LENgth(in_new_password) > 3 then
  raise_application_error(-20001, 'LA CONTRASEÑA ES MUY LARGA');
end if;
return true;
end;
/

CREATE PROFILE EJEMPLO LIMIT 
   CONNECT_TIME               1
   IDLE_TIME                  1
   PASSWORD_VERIFY_FUNCTION tres_caracteres_o_menos;
#+end_notes   

* Referencias
#+INCLUDE: "../../../common/footer.org"
