


#+BEGIN_SRC dot :file graph.pdf :exports results :cmd dot :cmdline -Tpdf
digraph {
                label="Instancias y listeners de oracle";
                sorth=1;
                
                
                i1 [shape="box", label="Instancia 1"];
                i2 [shape="box", label="Instancia 2 "];
                i3 [shape="box", label="Instancia 3"];

                b1 [shape="box", label="Base de datos"];
                b2 [shape="box", label="Base de datos"];

                l1 [shape="box", label="Listener"];
                l2 [shape="box", label="Listener"];
                l3 [shape="box", label="Listener"];

                i1 -> b1;
                l1 -> i1 [dir=back];

                i2 -> b2;
                i3 -> b2;
                l2 -> i2  [dir=back]; 
                l2 -> i3  [dir=back];
                l3 -> i3 [dir=back];
}
#+END_SRC

#+RESULTS:
[[file:graph.pdf]]


#+BEGIN_SRC dot :file vsgraph.png  :exports results :cmd dot _:cmdline -Tpdf
digraph {
                label="Valor de un asteroide";
                sortv=1;
                
                reservas_mundiales_oro [label="Reservas mundiales\nde oro"];
                valor_asteroide [label="Valor de un asteroide"];
                hay_poco_oro [label="Escasez de oro"];
                comparacion_humanitas [label="Visualización\nreservas de oro"];
                oro_consumible [label="La electrónica consume oro"];
                oro_reutilizado [label="El oro no solía consumirse"];

                reservas_mundiales_oro -> valor_asteroide;
                Platino -> valor_asteroide;
                Cobre -> valor_asteroide;
                Hierro -> valor_asteroide;

                hay_poco_oro -> reservas_mundiales_oro;
                
                
                comparacion_humanitas -> hay_poco_oro;
                oro_consumible -> oro_reutilizado;
                oro_reutilizado -> reservas_mundiales_oro;

}
#+END_SRC



#+name: dot-eg-table
| a | Hello |
| b | World |

#+name: make-dot
#+BEGIN_SRC emacs-lisp :var table=dot-eg-table :results output :exports none
  (mapcar #'(lambda (x)
              (princ (format "%s [label =\"%s\", shape = \"box\"];\n"
                             (first x) (second x)))) table)
              (princ (format "%s -- %s;\n" (first (first table)) (first (second table))))
#+END_SRC


and this is chained to a dot source code block

#+BEGIN_SRC dot :file vsgraph-elisp.png :var input=make-dot :exports results :cmdline -Tpdf
graph {
 $input
}
#+END_SRC
